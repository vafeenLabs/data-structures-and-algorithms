Реализация алгоритма
Объявим рабочие массивы.

vector<int> col, res;
vector<vector<int> > g;
vector<stack<int> > s;

Поиск в глубину с вершины v.

void dfs(int v)
{
  int color = col[v];
  if(s[color].empty())
    res[v] = -1;
  else
    res[v] = s[color].top();

  s[color].push(v);

  for(int i = 0; i < g[v].size(); i++)
  {
    int to = g[v][i];
    dfs(to);
  }
  s[color].pop();
}

Основная часть программы. Читаем дерево.

scanf("%d %d",&n,&c);
g.resize(n+1);
for(i = 2; i <= n; i++)
{
  scanf("%d",&val);
  g[val].push_back(i);
}

Читаем цвета вершин дерева.

col.resize(n+1);
for(i = 1; i <= n; i++)
  scanf("%d",&col[i]);

Запускаем поиск в глубину из вершины 1.

s.resize(c+1);
res.resize(n+1);
dfs(1);

Выводим ответ.

for(i = 1; i <= n; i++)
  printf("%d ",res[i]);
printf("\n");

